name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  SOLIDITY_VERSION: '0.8.19'

jobs:
  # Linting and Code Quality
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Check Prettier formatting
        run: npx prettier --check .

  # Smart Contract Testing
  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Run contract tests
        run: npm run test:contracts

      - name: Generate coverage report
        run: npm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: contracts
          name: contract-coverage

  # Security Analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security analysis
        run: |
          echo "Security analysis will be implemented in Phase 2"
          echo "Skipping for now as tools are not yet configured"

  # Frontend Testing
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: .next/

  # Deploy to Testnet
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [lint, test-contracts, security, test-frontend]
    if: github.ref == 'refs/heads/develop'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Polygon Mumbai
        run: npm run deploy:testnet
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.POLYGON_MUMBAI_RPC_URL }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}

      - name: Update deployment info
        run: |
          echo "Deployment completed at $(date)" >> deployment.log
          echo "Branch: ${{ github.ref }}" >> deployment.log
          echo "Commit: ${{ github.sha }}" >> deployment.log

  # Deploy to Mainnet
  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [lint, test-contracts, security, test-frontend]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Polygon Mainnet
        run: npm run deploy:mainnet
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          POLYGON_MAINNET_RPC_URL: ${{ secrets.POLYGON_MAINNET_RPC_URL }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}

      - name: Update deployment info
        run: |
          echo "Production deployment completed at $(date)" >> deployment.log
          echo "Branch: ${{ github.ref }}" >> deployment.log
          echo "Commit: ${{ github.sha }}" >> deployment.log

  # Notify on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [deploy-testnet, deploy-mainnet]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-testnet.result == 'success' || needs.deploy-mainnet.result == 'success'
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Check the deployment logs for contract addresses."

      - name: Notify failure
        if: needs.deploy-testnet.result == 'failure' || needs.deploy-mainnet.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for error details."
